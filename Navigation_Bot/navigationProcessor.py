from Navigation_Bot.bots.navigationBot import NavigationBot
from Navigation_Bot.bots.mapsBot import MapsBot
from Navigation_Bot.core.jSONManager import JSONManager
from Navigation_Bot.bots.webDriverManager import WebDriverManager
from PyQt6.QtCore import QTimer
from concurrent.futures import ThreadPoolExecutor
from Navigation_Bot.core.paths import CONFIG_JSON

"""TODO 1.process_row_wrapper() ‚Äî —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        2.json_data ‚Üí DataModel /–æ—Ç–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
        3.process_all() –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä ?
"""


class NavigationProcessor:
    def __init__(self, json_data: list, logger, gsheet, filepath, display_callback, single_row=True, updated_rows=None):
        self.json_data = json_data
        self.log = logger
        self.gsheet = gsheet
        self.filepath = filepath
        self.display_callback = display_callback

        self._single_row_processing = single_row
        self.updated_rows = updated_rows if updated_rows is not None else []
        self.driver_manager = None
        self.browser_opened = False
        self.navibot = None
        self.mapsbot = None

    def process_row_wrapper(self, row):
        try:
            if row >= len(self.json_data):
                self.log(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            car = self.json_data[row]
            if not car.get("–¢–°"):
                self.log(f"‚õî –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç –¢–° –≤ —Å—Ç—Ä–æ–∫–µ {row + 1}")
                return
            self.init_driver_if_needed()
            updated = self.process_wialon_row(car)
            if not updated.get("_–Ω–æ–≤—ã–µ_–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"):
                self.log(f"‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –Ø.–ö–∞—Ä—Ç –¥–ª—è –¢–° {updated.get('–¢–°')}")
                return
            self.update_json_and_switch_to_yandex(row, updated)
            self.process_maps_and_write(updated, row)

            QTimer.singleShot(0, self.display_callback)
            self.log(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –¢–°: {updated.get('–¢–°')}")

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_row_wrapper: {e}")

    def init_driver_if_needed(self):
        if not self.browser_opened or not hasattr(self, "driver_manager"):
            self.driver_manager = WebDriverManager(log_func=self.log)
            self.driver_manager.start_browser()
            self.driver_manager.login_wialon()
            self.browser_opened = True
            self.log("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    def process_wialon_row(self, car):
        driver = self.driver_manager.driver
        driver.switch_to.window(driver.window_handles[0])
        self.log("üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Wialon...")
        navibot = NavigationBot(driver, log_func=self.log)
        return navibot.process_row(car, switch_to_wialon=False)

    def update_json_and_switch_to_yandex(self, row, updated):
        updated.pop("_–Ω–æ–≤—ã–µ_–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", None)
        # self.json_data[row] = updated
        self.json_data[row].update(updated)

        JSONManager().save_in_json(self.json_data, self.filepath)
        self.driver_manager.open_yandex_maps()

    def process_maps_and_write(self, car, row_idx):
        maps_bot = MapsBot(self.driver_manager.driver, log_func=self.log)
        maps_bot.process_navigation_from_json(car)
        self.updated_rows.append(car)

        self.json_data[row_idx] = car
        JSONManager().save_in_json(self.json_data, self.filepath)

        if self._single_row_processing:
            self.gsheet.append_to_cell(car)
            self.log("üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets")

    def process_all(self):
        self._single_row_processing = False
        self.updated_rows = []
        self.log("‚ñ∂ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¢–°...")

        with ThreadPoolExecutor(max_workers=1) as executor:
            for row in range(len(self.json_data)):
                car = self.json_data[row]
                if not car.get("id") or not car.get("–¢–°"):
                    continue
                executor.submit(self.process_row_wrapper, row)

        QTimer.singleShot(5000, self.display_callback)

    def write_all_to_google(self):
        if hasattr(self, "updated_rows") and self.updated_rows:
            try:
                self.gsheet.append_to_cell(self.updated_rows)
                self.log(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets ({len(self.updated_rows)} —à—Ç.)")
            except Exception as e:

                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            self.updated_rows = []
