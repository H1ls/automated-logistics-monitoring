import re
import time
from datetime import datetime, timedelta
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from Navigation_Bot.core.jSONManager import JSONManager
from Navigation_Bot.core.paths import CONFIG_JSON

"""TODO 1.–û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ (–ø–æ–¥ –±—É–¥—É—â—É—é ML-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é)
        MapsBot - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã 
        2.–í—ã–Ω–µ—Å—Ç–∏ –≤–≤–æ–¥ –∏ –∫–ª–∏–∫–∏ –≤ MapsUIHelper
        3.–í—ã–Ω–µ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
        4.–í—ã–Ω–µ—Å—Ç–∏ address+datetime –æ–±—Ä–∞–±–æ—Ç–∫—É    
    
        """


class MapsBot:
    def __init__(self, driver, sheets_manager=None, log_func=None):
        self.driver = driver
        self.sheets_manager = sheets_manager
        self.log = log_func or print
        self._load_selectors()

    def _load_selectors(self):
        self.selectors = JSONManager.get_selectors("yandex_selectors", CONFIG_JSON)
        # self.log("‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä—ã –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    def _by(self, key):
        val = self.selectors.get(key)
        if not val:
            raise ValueError(f"–°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
        if val.startswith("/"):
            return (By.XPATH, val)
        elif val.startswith("."):
            return (By.CSS_SELECTOR, val)
        else:
            return (By.CLASS_NAME, val)

    def web_driver_wait(self, locator, timeout=10, condition="clickable"):
        conditions = {
            "presence": EC.presence_of_element_located,
            "visible": EC.visibility_of_element_located,
            "clickable": EC.element_to_be_clickable
        }
        cond = conditions.get(condition, EC.presence_of_element_located)
        return WebDriverWait(self.driver, timeout).until(cond(locator))

    def _try_click(self, key: str, label: str = "", timeout=3) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É (–ø–æ –∫–ª—é—á—É –∏–∑ config)."""
        try:
            locator = self._by(key)
            btn = self.web_driver_wait(locator, timeout=timeout, condition="clickable")
            btn.click()
            if label:
                pass
                # print(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{label}'")
                # self.log(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{label}'")
            time.sleep(0.3)
            return True
        except Exception:
            return False

    def prepare_route_interface(self):
        if self._try_click("route_button", "–ú–∞—Ä—à—Ä—É—Ç—ã"):
            return True
        self._try_click("close_route", "–ó–∞–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç")
        return self._try_click("route_button", "–ú–∞—Ä—à—Ä—É—Ç—ã")

    def process_navigation_from_json(self, car: dict, unload_point: dict):
        if not self.prepare_route_interface():
            return

        from_coords = car.get("–∫–æ–æ—Ä", "")
        if not from_coords:
            self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            return

        address, unload_dt = self._parse_unload_block(unload_point)
        if not address or not unload_dt:
            return

        avg_minutes, avg_distance = self._build_route_and_get_distance(from_coords, address)

        if avg_distance < 1:
            self._handle_short_route(car)
            return

        arrival_time = datetime.now() + timedelta(hours=avg_distance / 66)
        result = self._get_arrival_result_from_datetime(arrival_time, unload_dt)

        self._finalize_result(car, result, avg_distance, avg_minutes)

    def _parse_unload_block(self, unload_point: dict) -> tuple[str, datetime | None]:
        for key in unload_point:
            if key.startswith("–í—ã–≥—Ä—É–∑–∫–∞ "):
                idx = key.split(" ")[1]
                break
        else:
            idx = "1"

        address = unload_point.get(f"–í—ã–≥—Ä—É–∑–∫–∞ {idx}", "").strip()
        date_str = unload_point.get(f"–î–∞—Ç–∞ {idx}", "").strip()
        time_str = unload_point.get(f"–í—Ä–µ–º—è {idx}", "").strip()

        if not address or not date_str or not time_str:
            self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≥—Ä—É–∑–∫–µ.")
            return "", None

        unload_dt = self._parse_datetime(date_str, time_str)
        return address, unload_dt

    def _handle_short_route(self, car: dict):
        """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –±–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∞"""
        self.log("üì¶ –ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ.")
        car["–≥–µ–æ"] = "–≤—ã–≥—Ä—É–∑–∫–∞"
        car["–∫–æ–æ—Ä"] = ""
        car["—Å–∫–æ—Ä–æ—Å—Ç—å"] = 0
        arrival = datetime.now().strftime("%d.%m.%Y %H:%M")
        car["–ú–∞—Ä—à—Ä—É—Ç"] = {
            "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ": "0.0 –∫–º",
            "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "0 –º–∏–Ω",
            "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": arrival,
            "—É—Å–ø–µ–µ—Ç": True,
            "time_buffer": "‚Äî"
        }

    def _build_route_and_get_distance(self, from_coords: str, to_address: str) -> tuple[float, float]:
        """—Ä–∞–±–æ—Ç–∞ —Å –Ø.–ö–∞—Ä—Ç–∞–º–∏"""
        self._enter_from_coordinates(from_coords)
        self._enter_to_address(to_address)
        # self._enter_input("from_input", from_coords, "–û—Ç–∫—É–¥–∞")
        # self._enter_input("to_input", address, "–ö—É–¥–∞")

        routes = self.get_route_info()
        if not routes:
            raise ValueError("‚ùå –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
        avg_minutes, avg_distance = self._calculate_average_route(routes)
        self.log(f"üõ£Ô∏è –°—Ä–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: {avg_distance} –∫–º –∑–∞ {avg_minutes} –º–∏–Ω")
        return avg_minutes, avg_distance

    def _finalize_result(self, car: dict, result: dict, avg_distance: float, avg_minutes: float):
        """–∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            close_btn = self.driver.find_element(*self._by("close_route"))
            close_btn.click()
            time.sleep(0.3)
        except Exception:
            pass

        car["–ú–∞—Ä—à—Ä—É—Ç"] = {
            "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ": f"{avg_distance} –∫–º",
            "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{avg_minutes} –º–∏–Ω",
            "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": result["–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"],
            "—É—Å–ø–µ–µ—Ç": result["on_time"],
            "time_buffer": result["time_buffer"]
        }

    def _enter_to_address(self, address):
        self.log(f"üì• –í–≤–æ–¥ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {address}")
        to_input = self.web_driver_wait(self._by("to_input"))
        to_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE, address, Keys.ENTER)
        time.sleep(1)

    def _enter_from_coordinates(self, coord):
        # self.log(f"üöö –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—à–∏–Ω—ã: {coord}")
        try:
            from_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located(self._by("from_input"))
            )

            self.driver.execute_script("arguments[0].focus();", from_input)
            time.sleep(0.5)
            from_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE)
            from_input.send_keys(coord, Keys.ENTER)
            time.sleep(1)
            # self.log("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã '–û—Ç–∫—É–¥–∞' –≤–≤–µ–¥–µ–Ω—ã.")
        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤ '–û—Ç–∫—É–¥–∞': {msg}")

    def _enter_input(self, key: str, value: str, label: str = ""):
        try:
            element = self.web_driver_wait(self._by(key))
            self.driver.execute_script("arguments[0].focus();", element)
            time.sleep(0.2)
            element.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE, value, Keys.ENTER)
            time.sleep(1)
            if label:
                self.log(f"üì• –í–≤–æ–¥ –≤ –ø–æ–ª–µ '{label}': {value}")
        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤ '{label or key}': {msg}")

    def get_route_info(self):
        self.log("‚åõ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        try:
            for _ in range(10):
                items = self.driver.find_elements(*self._by("route_item"))
                filtered = [el for el in items if "_type_auto" in el.get_attribute("class")]
                if filtered:
                    break
                time.sleep(1)
            else:
                self.log("‚ùó –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, fallback...")
                route = self.get_first_route()
                return [route] if route else []

            all_routes = []
            for item in filtered:
                parsed = self._parse_route_item(item)
                if parsed:
                    all_routes.append(parsed)

            self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(all_routes)}\n {all_routes}")
            return all_routes

        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {msg}")
            return []

    def get_first_route(self):
        try:
            item = self.driver.find_element(*self._by("route_item"))
            if "_type_auto" not in item.get_attribute("class"):
                return None
            return self._parse_route_item(item)
        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: {msg}")
            return None

    def _parse_route_item(self, item):
        try:
            time_el = item.find_element(*self._by("route_duration"))
            dist_el = item.find_element(*self._by("route_distance"))

            duration = time_el.text.strip().replace("\xa0", " ")
            dist_text = dist_el.text.strip().replace("\xa0", "").replace(" ", "").replace(",", ".").replace("–∫–º", "")

            try:
                distance = float(dist_text)
            except ValueError:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä—ã: "800–º", "0–º" –∏ —Ç.–ø.
                if "–º" in dist_text:
                    self.log(f"üìè –ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç (< 1 –∫–º): {dist_text}")
                    return {
                        "duration": "0",  # –Ω—É–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        "distance": 0.0  # 0 –∫–º
                    }
                raise

            return {
                "duration": duration,
                "distance": distance
            }

        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {msg}")
            return None

    @staticmethod
    def _parse_datetime(date_str, time_str):
        try:
            # –ø—Ä–æ–±—É–µ–º —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
            return datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M:%S")
        except ValueError:
            try:
                # –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å–µ–∫—É–Ω–¥
                return datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            except Exception as e:
                # print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è: '{date_str}' '{time_str}' ‚Üí {e}")
                return None

    @staticmethod
    def _duration_to_minutes(time_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç '2 –¥–Ω. 3 —á 41 –º–∏–Ω' –≤ –º–∏–Ω—É—Ç—ã (int)."""
        try:
            time_str = time_str.strip().lower().replace("~", "")
            total_min = 0

            pattern = r"(?:(\d+)\s*–¥–Ω\.)?\s*(?:(\d+)\s*—á)?\s*(?:(\d+)\s*–º–∏–Ω)?"
            match = re.search(pattern, time_str)
            if not match:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            days = int(match.group(1)) if match.group(1) else 0
            hours = int(match.group(2)) if match.group(2) else 0
            minutes = int(match.group(3)) if match.group(3) else 0

            total_min = days * 1440 + hours * 60 + minutes
            return total_min

        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {time_str} ‚Üí {e}")

    @staticmethod
    def _calculate_average_route(routes):
        times = [MapsBot._duration_to_minutes(r["duration"]) for r in routes]
        distances = [r["distance"] for r in routes]
        return round(sum(times) / len(times)), round(sum(distances) / len(distances))

    @staticmethod
    def _get_arrival_result_from_datetime(arrival_time, unload_dt):
        if unload_dt:
            buffer = unload_dt - arrival_time
            total_minutes = int(buffer.total_seconds() // 60)
        else:
            total_minutes = 0

        buf_hours = total_minutes // 60
        buf_minutes = total_minutes % 60

        return {
            "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": arrival_time.strftime("%d.%m.%Y %H:%M"),
            "–≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏": unload_dt.strftime("%d.%m.%Y %H:%M") if unload_dt else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "on_time": bool(unload_dt and arrival_time <= unload_dt),
            "time_buffer": f"{buf_hours}—á {buf_minutes}–º",
            "buffer_minutes": total_minutes
        }
