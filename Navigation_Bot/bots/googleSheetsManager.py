import re
import os
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

from Navigation_Bot.core.jSONManager import JSONManager
from Navigation_Bot.core.paths import INPUT_FILEPATH, CONFIG_JSON


class GoogleSheetsManager:
    def __init__(self,config_key="default", log_func=None):
        self.log = log_func
        self.config_key = config_key
        self.config_manager = JSONManager(CONFIG_JSON)
        self.data_manager = JSONManager(INPUT_FILEPATH)

        # –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        self.creds_path = None
        self.sheet_id = None
        self.worksheet_index = None
        self.column_index = None
        self.file_path = None

        self.sheet = None
        self.load_settings()


    def load_settings(self):
        data = self.config_manager.load_json()
        if not isinstance(data, dict):
            self.log("‚ùå config_manager.load_json() –≤–µ—Ä–Ω—É–ª –Ω–µ dict ‚Äî –ø—Ä–æ–≤–µ—Ä—å CONFIG_JSON")
            return

        config_block = data.get("google_config", {})
        defaults = config_block.get("default", {})
        current = config_block.get("custom", defaults)

        self.creds_file = str(current.get("creds_file") or defaults.get("creds_file") or "")
        self.sheet_id = str(current.get("sheet_id") or defaults.get("sheet_id") or "")
        self.worksheet_index = int(current.get("worksheet_index") or defaults.get("worksheet_index") or 0)
        self.column_index = int(current.get("column_index") or defaults.get("column_index") or 0)

        if not os.path.exists(self.creds_file):
            self.log(f"‚ùå –§–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.creds_file}")
            return

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∏ –¥–æ—Å—Ç–∞—ë–º credentials
            full_block = JSONManager().load_json(self.creds_file)
            creds_data = full_block.get("credentials")

            if not creds_data:
                self.log(f"‚ùå –í —Ñ–∞–π–ª–µ {self.creds_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'credentials'")
                return

            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                creds_data,
                scopes=[
                    "https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive"
                ]
            )

            client = gspread.authorize(creds)
            sheet = client.open_by_key(self.sheet_id)
            self.sheet = sheet.get_worksheet(self.worksheet_index)

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.sheet = None

    def load_data(self):
        try:
            return self.sheet.get_all_values() if self.sheet else []
        except Exception as e:
            self.log(f"Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞: {e}")
            return []

    def refresh_name(self, rows, file_path=None):
        file_path = file_path or self.file_path
        existing_data = self.data_manager.load_json(file_path)
        if not isinstance(existing_data, list):
            existing_data = []

        existing_indexes = {entry.get("index") for entry in existing_data}
        active_indexes = set()
        new_entries = []

        for i, row in enumerate(rows[2:], start=3):
            if len(row) < self.column_index or row[self.column_index - 1].strip() == "–ì–æ—Ç–æ–≤":
                continue

            raw_ts = re.sub(r"\s+", "", row[3])  # —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –¢–°
            number, phone = raw_ts[:9], raw_ts[9:]

            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏–æ–Ω–æ–º
            formatted_ts = number[:6] + ' ' + number[6:] if len(number) >= 9 else number

            fio = row[4] if len(row) > 4 else ""
            load = row[6] if len(row) > 6 else ""
            unload = row[7] if len(row) > 7 else ""

            #  –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            if not any([formatted_ts, phone, fio, load, unload]):
                continue

            active_indexes.add(i)
            if i not in existing_indexes:
                new_entries.append({
                    "index": i,
                    "–¢–°": formatted_ts,
                    "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
                    "–§–ò–û": row[4],
                    "–ö–ê": row[5],
                    "–ü–æ–≥—Ä—É–∑–∫–∞": row[6],
                    "–í—ã–≥—Ä—É–∑–∫–∞": row[7],
                })
        filtered_data = [entry for entry in existing_data if entry.get("index") in active_indexes]

        result_data = filtered_data + new_entries

        self.data_manager.save_in_json(result_data, file_path)
        self.log(
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_entries)}, —É–¥–∞–ª–µ–Ω–æ {len(existing_data) - len(filtered_data)} —Å—Ç—Ä–æ–∫.")
        # return new_entries

    def append_to_cell(self, data, column=12):
        if isinstance(data, list):
            for item in data:
                self._append_entry(item, column)
        elif isinstance(data, dict):
            self._append_entry(data, column)

    def _append_entry(self, item, column):
        try:
            if not self.sheet:
                self.log("‚ö†Ô∏è –õ–∏—Å—Ç Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                return

            row_index = item.get("index")
            if not row_index:
                self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏: –Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏.")
                return

            geo = item.get("–≥–µ–æ", "")
            coor = item.get("–∫–æ–æ—Ä", "")
            if not geo and not coor:
                self.log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {row_index}: –Ω–µ—Ç –≥–µ–æ/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
                return

            current_time = datetime.now().strftime("%d-%m %H:%M")
            speed = item.get("—Å–∫–æ—Ä–æ—Å—Ç—å", 0)
            status = "—Å—Ç–æ–∏—Ç" if isinstance(speed, (int, float)) and speed < 5 else "–µ–¥–µ—Ç"
            new_text = f"{current_time} {status} {geo} {coor}"

            try:
                cell_value = self.sheet.cell(row_index, column).value
            except Exception as e:
                self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —è—á–µ–π–∫—É {row_index}, –∫–æ–ª. {column}: {e}")
                cell_value = ""

            updated_value = f"{cell_value}\n{new_text}" if cell_value else new_text
            self.sheet.update_cell(row_index, column, updated_value)
            self.log(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_index}, –∫–æ–ª–æ–Ω–∫–∞ {column}")

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–æ–∫–∏ {item.get('–¢–°')}: {e}")

    def is_row_empty(self, row_index: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö 1‚Äì7"""
        try:
            values = self.sheet.row_values(row_index)
            return all((i >= len(values) or not values[i].strip()) for i in range(7))
        except Exception:
            return True  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—É—Å—Ç–æ–π

    def upload_new_row(self, entry: dict):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ Google Sheets"""
        try:
            row_index = entry["index"]
            ts_with_phone = f"{entry.get('–¢–°', '')} {entry.get('–¢–µ–ª–µ—Ñ–æ–Ω', '')}".strip()

            load_str = "; ".join(
                f"{blk.get(f'–í—Ä–µ–º—è {i + 1}', '')} {blk.get(f'–ü–æ–≥—Ä—É–∑–∫–∞ {i + 1}', '')}".strip()
                for i, blk in enumerate(entry.get("–ü–æ–≥—Ä—É–∑–∫–∞", []))
            )
            unload_str = "; ".join(
                f"{blk.get(f'–í—Ä–µ–º—è {i + 1}', '')} {blk.get(f'–í—ã–≥—Ä—É–∑–∫–∞ {i + 1}', '')}".strip()
                for i, blk in enumerate(entry.get("–í—ã–≥—Ä—É–∑–∫–∞", []))
            )

            row_data = [
                ts_with_phone,  # col D (–¢–° + —Ç–µ–ª–µ—Ñ–æ–Ω)
                entry.get("–§–ò–û", ""),  # col E (–§–ò–û)
                entry.get("–ö–ê", ""),  # col F (–ö–ê)
                load_str,  # col G (–ü–æ–≥—Ä—É–∑–∫–∞)
                unload_str  # col H (–í—ã–≥—Ä—É–∑–∫–∞)
            ]

            self.sheet.update(f"D{row_index}:H{row_index}", [row_data])
            self.log(f"üì§ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets (row={row_index})")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")

    def write_all(self, items: list):
        if not items:
            self.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets.")
            return

        try:
            self.append_to_cell(items)
            self.log(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets ({len(items)} —à—Ç.)")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
