from PyQt6.QtWidgets import (
    QDialog, QTabWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QWidget, QFormLayout, QLabel, QLineEdit
)
from Navigation_Bot.core.jSONManager import JSONManager
from Navigation_Bot.core.paths import CONFIG_JSON
from Navigation_Bot.bots.navigationBot import NavigationBot
from Navigation_Bot.bots.mapsBot import MapsBot
from Navigation_Bot.bots.googleSheetsManager import GoogleSheetsManager

class CombinedSettingsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.resize(600, 400)

        # JSON-–º–µ–Ω–µ–¥–∂–µ—Ä
        self.json_manager = JSONManager(file_path=str(CONFIG_JSON))

        # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—Ä—ë–º —Å–µ–∫—Ü–∏—è–º
        self.sections = {
            "wialon_selectors": (
                "Wialon", {
                    "search_input_xpath": ("XPath –ø–æ–∏—Å–∫–∞", str),
                    "unit_block_xpath":    ("XPath –±–ª–æ–∫–∞ –¢–°", str),
                    "address_selector":    ("CSS –∞–¥—Ä–µ—Å–∞", str),
                    "copy_button_selector":("CSS –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", str),
                    "speed_selector":      ("CSS —Å–∫–æ—Ä–æ—Å—Ç–∏", str),
                }
            ),
            "yandex_selectors": (
                "–Ø.–ö–∞—Ä—Ç—ã", {
                    "route_button":   ("CSS –∫–Ω–æ–ø–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", str),
                    "close_route":    ("CSS –∑–∞–∫—Ä—ã—Ç–∏—è –º–∞—Ä—à—Ä—É—Ç–∞", str),
                    "from_input":     ("XPath –û—Ç–∫—É–¥–∞", str),
                    "to_input":       ("XPath –ö—É–¥–∞", str),
                    "route_item":     ("CSS –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞", str),
                    "route_duration": ("CSS –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", str),
                    "route_distance": ("CSS —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è", str),
                }
            ),
            "google_config": (
                "Google", {
                    "creds_file":      ("–ü—É—Ç—å –∫ creds.json", str),
                    "sheet_id":        ("ID —Ç–∞–±–ª–∏—Ü—ã", str),
                    "worksheet_index": ("–ò–Ω–¥–µ–∫—Å –ª–∏—Å—Ç–∞", int),
                    "column_index":    ("–ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏", int),
                    "file_path":       ("–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É", str),
                }
            )
        }

        # UI
        layout = QVBoxLayout(self)
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ ‚Äî —Å–≤–æ—è —Ñ–æ—Ä–º–∞
        self.dialogs = {}
        for section_key, (tab_name, meta) in self.sections.items():
            widget = QWidget()
            form = QFormLayout(widget)
            edits = {}

            # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª–µ
            for key, (label, _) in meta.items():
                edit = QLineEdit()
                form.addRow(QLabel(label), edit)
                edits[key] = edit

            self.tabs.addTab(widget, tab_name)
            self.dialogs[section_key] = {
                "meta": meta,
                "edits": edits
            }

        # –ö–Ω–æ–ø–∫–∏
        btn_row = QHBoxLayout()
        btn_save   = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")
        btn_save.clicked.connect(self._on_save)
        btn_cancel.clicked.connect(self.reject)
        btn_row.addStretch()
        btn_row.addWidget(btn_save)
        btn_row.addWidget(btn_cancel)
        layout.addLayout(btn_row)

        # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
        self._load_all()

    def _load_all(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ JSON."""
        data = self.json_manager.load_json() or {}
        for section_key, cfg in self.dialogs.items():
            section = data.get(section_key, {})
            custom = section.get("custom", {})
            default = section.get("default", {})
            for key, edit in cfg["edits"].items():
                if key in custom:
                    edit.setText(str(custom[key]))
                elif key in default:
                    edit.setText(str(default[key]))

    def _on_save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç—å –¥–∏–∞–ª–æ–≥."""
        data = self.json_manager.load_json() or {}
        for section_key, cfg in self.dialogs.items():
            meta  = cfg["meta"]
            edits = cfg["edits"]
            sec   = data.setdefault(section_key, {})
            sec["custom"] = {}
            for key, edit in edits.items():
                val = edit.text()
                cast = meta[key][1]
                try:
                    sec["custom"][key] = cast(val)
                except:
                    sec["custom"][key] = val
        self.json_manager.save_in_json(data)
        if hasattr(self.parent(), "log"):
            self.parent().log("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        self.accept()

    @staticmethod
    def open_all_settings(gui):
        dlg = CombinedSettingsDialog(parent=gui)
        if not dlg.exec():
            return
        try:
            # Wialon-–±–æ—Ç
            if hasattr(gui, "driver_manager") and gui.driver_manager.driver:
                gui.navibot = NavigationBot(gui.driver_manager.driver, log_func=gui.log)
            # –Ø.–ö–∞—Ä—Ç—ã-–±–æ—Ç
            if hasattr(gui, "driver_manager") and gui.driver_manager.driver:
                gui.mapsbot = MapsBot(gui.driver_manager.driver, log_func=gui.log)
            # Google Sheets
            gui.gsheet = GoogleSheetsManager(log_func=gui.log)

            gui.log("üîÅ –í—Å–µ –±–æ—Ç—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        except Exception as e:
            gui.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤: {e}")
