from functools import partial
from PyQt6.QtWidgets import QTableWidgetItem, QPushButton, QWidget, QHBoxLayout, QLabel, QCheckBox, QVBoxLayout
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QColor

from Navigation_Bot.core.jSONManager import JSONManager
from Navigation_Bot.gui.AddressEditDialog import AddressEditDialog
from collections import ChainMap
from datetime import datetime, timedelta

from Navigation_Bot.core.paths import INPUT_FILEPATH, ID_FILEPATH

"""TODO:1.json_data ‚Äî –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é self.json_data[row][...]
         –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: DataModel 
             –í–≤–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π DataModel, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π TableManager –±—ã –¥–µ–ª–∞–ª get(row, field) / set(row, field, value)
        2._save_item() —Ä–∞—Å—Ç—ë—Ç : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ if-–æ–≤ 
             –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
                 self.field_savers = {
                   "–¢–°": self._save_ts_and_phone,
                   "id": self._save_id,
                 }
"""


class TableManager:
    def __init__(self, table_widget, json_data, log_func, on_row_click, on_edit_id_click):

        self.table = table_widget
        self.json_data = json_data
        self.log = log_func
        self.on_row_click = on_row_click
        self.on_edit_id_click = on_edit_id_click

    def display(self):

        try:
            self.json_data = JSONManager(str(INPUT_FILEPATH), log_func=self.log).load_json() or []
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
            self.json_data = []
        # üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ scroll –∏ selected_row
        try:
            scroll_value = self.table.verticalScrollBar().value()
            selected_row = self.table.currentRow()
        except Exception as e:
            print(f'{e}')

        try:
            self.table.setRowCount(0)

            for row_idx, row in enumerate(self.json_data):
                self.table.insertRow(row_idx)

                # –ö–Ω–æ–ø–∫–∞ ‚ñ∂ –∏–ª–∏ üõ†
                btn = QPushButton("‚ñ∂" if row.get("id") else "üõ†")
                if not row.get("id"):
                    btn.setStyleSheet("color: red;")
                    btn.clicked.connect(lambda _, idx=row_idx: self.on_edit_id_click(idx))
                else:
                    btn.clicked.connect(lambda _, idx=row_idx: self.on_row_click(idx))
                self.table.setCellWidget(row_idx, 0, btn)

                # ID —Å –∫–Ω–æ–ø–∫–æ–π üõ†
                id_value = str(row.get("id", ""))
                container = QWidget()
                layout = QHBoxLayout()
                layout.setContentsMargins(0, 0, 0, 0)
                label = QLabel(id_value)
                btn_tool = QPushButton("üõ†")
                btn_tool.setFixedWidth(30)
                btn_tool.clicked.connect(partial(self.on_edit_id_click, row_idx))
                layout.addWidget(label)
                layout.addWidget(btn_tool)
                layout.addStretch()
                container.setLayout(layout)
                self.table.setCellWidget(row_idx, 1, container)

                ts = row.get("–¢–°", "")
                phone = row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "")
                self._set_cell(row_idx, 2, f"{ts}\n{phone}" if phone else ts, editable=True)

                self._set_cell(row_idx, 3, row.get("–ö–ê", ""), editable=True)
                self._set_cell(row_idx, 4, self._get_field_with_datetime(row, "–ü–æ–≥—Ä—É–∑–∫–∞"))
                self._set_cell(row_idx, 5, self._get_field_with_datetime(row, "–í—ã–≥—Ä—É–∑–∫–∞"))
                self._set_cell(row_idx, 6, row.get("–≥–µ–æ", ""))

                arrival = row.get("–ú–∞—Ä—à—Ä—É—Ç", {}).get("–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "‚Äî")
                buffer = row.get("–ú–∞—Ä—à—Ä—É—Ç", {}).get("time_buffer", "‚Äî")
                if ":" in buffer:
                    try:
                        h, m = map(int, buffer.split(":"))
                        buffer = f"{h}—á {m}–º"
                    except Exception:
                        pass

                self._set_readonly_cell(row_idx, 7, arrival)
                self._set_readonly_cell(row_idx, 8, buffer)

                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø–æ–∑–¥–Ω–µ–π –ø–æ–≥—Ä—É–∑–∫–µ
                pg = row.get("–ü–æ–≥—Ä—É–∑–∫–∞", [])
                if pg and isinstance(pg, list) and isinstance(pg[0], dict):
                    date_str = pg[0].get("–î–∞—Ç–∞ 1", "")
                    time_str = pg[0].get("–í—Ä–µ–º—è 1", "")
                    try:
                        if time_str.count(":") == 1:
                            time_str += ":00"
                        dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M:%S")
                        if dt > datetime.now() + timedelta(hours=3):
                            for col in range(self.table.columnCount()):
                                item = self.table.item(row_idx, col)
                                if item:
                                    item.setBackground(QColor(210, 235, 255))
                    except Exception as e:
                        ts = row.get("–¢–°", "‚Äî")
                        self.log(
                            f"[DEBUG] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–∏ –ü–æ–≥—Ä—É–∑–∫–∏ —É –¢–°: {ts} (—Å—Ç—Ä–æ–∫–∞ {row_idx + 1}):\n {e}")
                        # print(f"[DEBUG] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–∏ –ü–æ–≥—Ä—É–∑–∫–∏ —É –¢–°: {ts} (—Å—Ç—Ä–æ–∫–∞ {row_idx + 1}): {e}")

            self.table.resizeRowsToContents()

        except Exception as e:
            print(f"[DEBUG] ‚ùå –û—à–∏–±–∫–∞ –≤ display(): {e}")
            return

        # üîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ scroll –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        QTimer.singleShot(0, lambda: self._restore_scroll(scroll_value, selected_row))

    def _restore_scroll(self, scroll_value, selected_row):
        try:
            self.table.verticalScrollBar().setValue(scroll_value)
            if 0 <= selected_row < self.table.rowCount():
                self.table.selectRow(selected_row)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _set_cell(self, row, col, value, editable=False):
        item = QTableWidgetItem(value)
        item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
        if not editable:
            item.setFlags(item.flags() ^ Qt.ItemFlag.ItemIsEditable)
        self.table.setItem(row, col, item)

    def _set_readonly_cell(self, row, col, value):
        item = QTableWidgetItem(str(value))
        item.setFlags(Qt.ItemFlag.ItemIsEnabled)
        item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
        self.table.setItem(row, col, item)

    @staticmethod
    def _get_field_with_datetime(row, key):
        if isinstance(row.get(key), list):
            blocks = []
            for i, block in enumerate(row[key], 1):
                date = block.get(f"–î–∞—Ç–∞ {i}", "")
                time = block.get(f"–í—Ä–µ–º—è {i}", "")
                address = block.get(f"{key} {i}", "")
                entry = f"{date} {time}".strip()
                if entry and entry != "–ù–µ —É–∫–∞–∑–∞–Ω–æ –ù–µ —É–∫–∞–∑–∞–Ω–æ":
                    blocks.append(entry)
                if address:
                    blocks.append(address)
                if i < len(row[key]):
                    blocks.append("____________________")
            return "\n".join(blocks)
        return ""

    def edit_cell_content(self, row, col):

        col_name = self.table.horizontalHeaderItem(col).text()
        # self.log(f"–ö–ª–∏–∫: —Å—Ç—Ä–æ–∫–∞ {row + 1}, –∫–æ–ª–æ–Ω–∫–∞ '{col_name}'")
        if col_name in ["–ü–æ–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏"]:
            prefix = "–ü–æ–≥—Ä—É–∑–∫–∞"
        elif col_name in ["–í—ã–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏"]:
            prefix = "–í—ã–≥—Ä—É–∑–∫–∞"
        else:
            return
        data_list = self.json_data[row].get(prefix, [])
        dialog = AddressEditDialog(self.table, data_list, prefix)
        if dialog.exec():
            data_block, meta = dialog.get_result()
            if not data_block:
                self.log(f"{prefix}: –ü—É—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {row + 1} ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                return

            self.json_data[row][prefix] = data_block  # "–ü–æ–≥—Ä—É–∑–∫–∞" –∏–ª–∏ "–í—ã–≥—Ä—É–∑–∫–∞"
            if meta.get("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"):
                self.json_data[row]["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"] = meta["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"]
            if meta.get("–¢—Ä–∞–Ω–∑–∏—Ç"):
                self.json_data[row]["–¢—Ä–∞–Ω–∑–∏—Ç"] = meta["–¢—Ä–∞–Ω–∑–∏—Ç"]

            JSONManager().save_in_json(self.json_data, str(INPUT_FILEPATH))
            self.display()
            # self.log(f"{prefix} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row + 1}")

    def save_to_json_on_edit(self, item):
        QTimer.singleShot(0, lambda: self._save_item(item))

    def _save_item(self, item):
        row = item.row()
        col = item.column()
        header = self.table.horizontalHeaderItem(col).text()
        value = item.text()
        if header.lower() == "–≥–µ–æ":
            header = "–≥–µ–æ"
        if header in ["–ü–æ–≥—Ä—É–∑–∫–∞", "–í—ã–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏", "–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏"]:
            return
        if header in ["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "–ó–∞–ø–∞—Å", "–ó–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏"]:
            # –≠—Ç–∏ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            return

        # üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ "–¢–°" (—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
        if header == "–¢–°":
            lines = value.splitlines()
            ts = lines[0] if lines else ""
            phone = lines[1] if len(lines) > 1 else ""

            old_ts = self.json_data[row].get("–¢–°", "")
            old_phone = self.json_data[row].get("–¢–µ–ª–µ—Ñ–æ–Ω", "")

            if ts == old_ts and phone == old_phone:
                return

            self.json_data[row]["–¢–°"] = ts
            self.json_data[row]["–¢–µ–ª–µ—Ñ–æ–Ω"] = phone
            JSONManager().save_in_json(self.json_data, str(INPUT_FILEPATH))
            # self.log(f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: —Å—Ç—Ä–æ–∫–∞ {row + 1}, –¢–° ‚Üí {ts}, –¢–µ–ª–µ—Ñ–æ–Ω ‚Üí {phone}")
            return

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if header == "id":
            try:
                value = int(value)
            except ValueError:
                self.log(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ —Å—Ç—Ä–æ–∫–µ {row + 1}")
                return

        old_value = self.json_data[row].get(header)
        if old_value == value:
            return

        self.json_data[row][header] = value
        JSONManager().save_in_json(self.json_data, str(INPUT_FILEPATH))
        # self.log(f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: —Å—Ç—Ä–æ–∫–∞ {row + 1}, –∫–æ–ª–æ–Ω–∫–∞ '{header}' ‚Üí {value}")


