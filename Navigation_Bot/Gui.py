import os
import sys
import json
from threading import Lock
from functools import partial
from PyQt6.QtCore import QTimer, Qt,QMetaObject, Q_ARG
from concurrent.futures import ThreadPoolExecutor
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTableWidget,
    QTableWidgetItem, QPushButton, QTextEdit, QLabel,
    QHeaderView, QAbstractItemView
)

INPUT_FILEPATH = "config/selected_data.json"
ID_FILEPATH = "config/Id_car.json"


class NavigationGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Navigation Manager")
        self.resize(1400, 800)
        self.json_data = []
        self.executor = ThreadPoolExecutor(max_workers=1)
        self.browser_opened = False
        self._log_enabled = True
        self.init_ui()
        self.load_json()
        self.display_data()

        self.json_lock = Lock()

    def init_ui(self):
        self.btn_wialon = QPushButton("Wialon")
        self.btn_yandex = QPushButton("–Ø.–ö–∞—Ä—Ç—ã")
        self.btn_load_google = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ó–∞–¥–∞—á–∏")
        self.btn_process_all = QPushButton("‚ñ∂ –ü—Ä–æ–±–µ–∂–∞—Ç—å –≤—Å–µ –¢–°")

        for btn in [self.btn_wialon, self.btn_yandex, self.btn_load_google, self.btn_process_all]:
            btn.setFixedHeight(28)
            btn.setFixedWidth(110)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.btn_settings_wialon = QPushButton("‚öôÔ∏è")
        self.btn_settings_yamap = QPushButton("‚öôÔ∏è")
        for b in [self.btn_settings_wialon, self.btn_settings_yamap]:
            b.setFixedSize(28, 28)
            b.setToolTip("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.btn_settings_wialon.setEnabled(False)  # –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        self.btn_settings_yamap.setEnabled(False)
        self.btn_load_google.clicked.connect(self.load_from_google)
        self.btn_process_all.clicked.connect(self.process_all)
        self.btn_wialon.clicked.connect(self.open_wialon)
        self.btn_yandex.clicked.connect(self.open_yandex)

        top = QHBoxLayout()
        top.addWidget(self.btn_wialon)
        top.addWidget(self.btn_settings_wialon)
        top.addWidget(self.btn_yandex)
        top.addWidget(self.btn_settings_yamap)
        top.addWidget(self.btn_load_google)
        top.addWidget(self.btn_process_all)

        self.table = QTableWidget()
        self.table.setColumnCount(7)

        self.table.setHorizontalHeaderLabels([
            "", "id", "–¢–°", "–ü–æ–≥—Ä—É–∑–∫–∞",
            "–í—ã–≥—Ä—É–∑–∫–∞", "–≥–µ–æ", "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"
        ])

        self.table.setColumnWidth(0, 40)  # ‚ñ∂ –∫–Ω–æ–ø–∫–∞
        self.table.setColumnWidth(2, 85)  # –¢–°
        self.table.setColumnWidth(3, 500)  # –ü–æ–≥—Ä—É–∑–∫–∞
        self.table.setColumnWidth(4, 500)  # –í—ã–≥—Ä—É–∑–∫–∞

        self.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Interactive)
        self.table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Interactive)
        self.table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeMode.Interactive)

        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(QAbstractItemView.EditTrigger.DoubleClicked)

        self.table.setColumnHidden(1, True)  # —Å–∫—Ä—ã—Ç—å id

        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)
        self.log_box.setFixedHeight(150)

        self.table.cellDoubleClicked.connect(self.edit_cell_content)
        self.table.itemChanged.connect(self.save_to_json_on_edit)

        layout = QVBoxLayout()
        top = QHBoxLayout()
        top.addWidget(self.btn_wialon)
        top.addWidget(self.btn_settings_wialon)
        top.addWidget(self.btn_yandex)
        top.addWidget(self.btn_settings_yamap)
        top.addWidget(self.btn_load_google)
        top.addWidget(self.btn_process_all)

        layout.addLayout(top)
        layout.addWidget(self.table)
        layout.addWidget(QLabel("–õ–æ–≥:"))
        layout.addWidget(self.log_box)
        self.setLayout(layout)

        self.table.setWordWrap(True)

    def load_json(self):
        if os.path.exists(INPUT_FILEPATH):
            with open(INPUT_FILEPATH, "r", encoding="utf-8") as f:
                try:
                    self.json_data = json.load(f)
                except json.JSONDecodeError:
                    self.log("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON")
                    self.json_data = []

    def display_data(self):
        self._log_enabled = False

        try:
            if not self.json_data:
                self.log("JSON –ø—É—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return

            self.table.setRowCount(0)

            for row_idx, row in enumerate(self.json_data):
                self.table.insertRow(row_idx)

                # ‚ñ∂ –∏–ª–∏ üõ† –µ—Å–ª–∏ –Ω–µ—Ç ID
                has_id = bool(str(row.get("id", "")).strip())

                if has_id:
                    btn = QPushButton("‚ñ∂")
                    btn.clicked.connect(lambda _, idx=row_idx: self.executor.submit(self.process_row_wrapper, idx))
                else:
                    btn = QPushButton("üõ†")
                    btn.setStyleSheet("color: red;")
                    btn.clicked.connect(partial(self.open_id_editor, row_idx))

                self.table.setCellWidget(row_idx, 0, btn)

                # id (—Å–∫—Ä—ã—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
                id_value = str(row.get("id", ""))
                container = QWidget()
                layout = QHBoxLayout()
                layout.setContentsMargins(0, 0, 0, 0)
                label = QLabel(id_value)
                layout.addWidget(label)
                layout.addStretch()
                container.setLayout(layout)
                self.table.setCellWidget(row_idx, 1, container)

                # –¢–°
                ts = row.get("–¢–°", "")
                phone = row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "")
                self.set_cell(row_idx, 2, f"{ts}\n{phone}" if phone else ts, editable=True)

                # –ü–æ–≥—Ä—É–∑–∫–∞ –∏ –í—ã–≥—Ä—É–∑–∫–∞: –¥–∞—Ç–∞ + –≤—Ä–µ–º—è + –∞–¥—Ä–µ—Å
                self.set_cell(row_idx, 3, self.get_field_with_datetime(row, "–ü–æ–≥—Ä—É–∑–∫–∞"))
                self.set_cell(row_idx, 4, self.get_field_with_datetime(row, "–í—ã–≥—Ä—É–∑–∫–∞"))

                # –ì–µ–æ
                self.set_cell(row_idx, 5, row.get("–≥–µ–æ", ""))

                # –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                self.set_cell(
                    row_idx, 6,
                    self.get_nested_field(row, "–ú–∞—Ä—à—Ä—É—Ç", "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã—Ç–∏—è", "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è")
                )

            # –ê–≤—Ç–æ–≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
            self.table.setWordWrap(True)
            self.table.resizeRowsToContents()

        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤ display_data(): {e}")

        self._log_enabled = True

    def get_field_with_datetime(self, obj, key):
        if isinstance(obj.get(key), list):
            blocks = []
            for i, block in enumerate(obj[key], 1):
                date = block.get(f"–î–∞—Ç–∞ {i}", "")
                time = block.get(f"–í—Ä–µ–º—è {i}", "")
                address = block.get(f"{key} {i}", "")
                entry = f"{date} {time}".strip()
                if entry and entry != "–ù–µ —É–∫–∞–∑–∞–Ω–æ –ù–µ —É–∫–∞–∑–∞–Ω–æ":
                    blocks.append(entry)
                if address:
                    blocks.append(address)
                if i < len(obj[key]):
                    blocks.append("____________________")
            return "\n".join(blocks)
        return ""

    def open_id_editor(self, row):
        from Navigation_Bot.TrackingIdEditor import TrackingIdEditor
        car = self.json_data[row]

        dialog = TrackingIdEditor(car, log_func=self.log, parent=self)
        if dialog.exec():
            from Navigation_Bot.jSONManager import JSONManager
            JSONManager().save_json(self.json_data, INPUT_FILEPATH)
            self.display_data()

    def set_cell(self, row, col, value, editable=True):
        item = QTableWidgetItem(str(value) if value else "")
        if not value:
            item.setBackground(Qt.GlobalColor.red)
        if not editable:
            item.setFlags(item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.table.setItem(row, col, item)




    def get_nested_field(self, obj, *fields):
        for field in fields:
            if isinstance(obj, list):
                obj = obj[0] if obj else {}
            obj = obj.get(field, {}) if isinstance(obj, dict) else {}
        return obj if isinstance(obj, str) else ""



    def log(self, text):
        print(text)
        QMetaObject.invokeMethod(
            self.log_box,
            "append",
            Qt.ConnectionType.QueuedConnection,
            Q_ARG(str, str(text))
        )

    def edit_cell_content(self, row, col):
        from Navigation_Bot.AddressEditDialog import AddressEditDialog

        col_name = self.table.horizontalHeaderItem(col).text()
        self.log(f"–ö–ª–∏–∫: —Å—Ç—Ä–æ–∫–∞ {row + 1}, –∫–æ–ª–æ–Ω–∫–∞ '{col_name}'")

        if col_name in ["–ü–æ–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏"]:
            prefix = "–ü–æ–≥—Ä—É–∑–∫–∞"
        elif col_name in ["–í—ã–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏"]:
            prefix = "–í—ã–≥—Ä—É–∑–∫–∞"
        else:
            return

        data_list = self.json_data[row].get(prefix, [])
        dialog = AddressEditDialog(self, data_list, prefix)
        if dialog.exec():
            merged = dialog.get_result()
            if not merged:
                self.log(f"{prefix}: –ü—É—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {row + 1} ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                return
            self.json_data[row][prefix] = merged
            self.display_data()
            with open(INPUT_FILEPATH, "w", encoding="utf-8") as f:
                json.dump(self.json_data, f, ensure_ascii=False, indent=4)
            self.log(f"{prefix} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row + 1}")

    def save_to_json_on_edit(self, item):
        if not self._log_enabled:
            return

        QTimer.singleShot(0, lambda: self._save_item(item))

    def _save_item(self, item):
        row = item.row()
        col = item.column()
        header = self.table.horizontalHeaderItem(col).text()
        value = item.text()

        # üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º "–ì–µ–æ" –∫ "–≥–µ–æ"
        if header.lower() == "–≥–µ–æ":
            header = "–≥–µ–æ"

        # –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –≤—Ä—É—á–Ω—É—é –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
        if header in ["–ü–æ–≥—Ä—É–∑–∫–∞", "–í—ã–≥—Ä—É–∑–∫–∞", "–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏", "–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏"]:
            return

        if header == "id":
            try:
                value = int(value)
            except ValueError:
                self.log(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id –≤ —Å—Ç—Ä–æ–∫–µ {row + 1}")
                return

        old_value = self.json_data[row].get(header)
        if old_value == value:
            return

        with self.json_lock:
            self.json_data[row][header] = value
            with open(INPUT_FILEPATH, "w", encoding="utf-8") as f:
                json.dump(self.json_data, f, ensure_ascii=False, indent=4)

        self.log(f"–ò–∑–º–µ–Ω–µ–Ω–æ: —Å—Ç—Ä–æ–∫–∞ {row + 1}, –∫–æ–ª–æ–Ω–∫–∞ '{header}' ‚Üí {value}")

    def load_from_google(self):
        self.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets (–≤ —Ñ–æ–Ω–µ)...")

        def background_task():
            try:
                # üîÅ –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞
                from Navigation_Bot.googleSheetsManager import GoogleSheetsManager
                from Navigation_Bot.dataCleaner import DataCleaner
                from Navigation_Bot.jSONManager import JSONManager

                manager = GoogleSheetsManager()
                data = manager.load_data()

                with self.json_lock:
                    manager.refresh_name(data, INPUT_FILEPATH)

                    cleaner = DataCleaner(JSONManager(), INPUT_FILEPATH, ID_FILEPATH,log_func=self.log)
                    cleaner.clean_vehicle_names()
                    cleaner.add_id_to_data()
                    cleaner.start_clean()

                QTimer.singleShot(0, self.reload_and_show)

            except Exception as e:
                QTimer.singleShot(0, lambda: self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}"))

        self.executor.submit(background_task)

    def reload_and_show(self):
        with self.json_lock:
            self.load_json()
        self.display_data()
        self.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    def open_wialon(self):
        from Navigation_Bot.webDriverManager import WebDriverManager
        self.log("–û—Ç–∫—Ä—ã—Ç–∏–µ Wialon...")
        WebDriverManager().open_wialon()

    def open_yandex(self):
        from Navigation_Bot.webDriverManager import WebDriverManager
        self.log("–û—Ç–∫—Ä—ã—Ç–∏–µ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç...")
        WebDriverManager().open_yandex_maps()

    def process_row_wrapper(self, row):
        from Navigation_Bot.navigationBot import NavigationBot
        from Navigation_Bot.mapsBot import MapsBot
        from Navigation_Bot.jSONManager import JSONManager
        from Navigation_Bot.webDriverManager import WebDriverManager

        try:
            car = self.json_data[row]
            if not car.get("–¢–°"):
                self.log(f"‚õî –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç –¢–° –≤ —Å—Ç—Ä–æ–∫–µ {row + 1}")
                return

            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
            if not self.browser_opened or not hasattr(self, "driver_manager"):
                self.driver_manager = WebDriverManager(log_func=self.log)

                self.log("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.driver_manager.start_browser()
                self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Wialon...")
                self.driver_manager.login_wialon()
                self.browser_opened = True
                self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

            driver = self.driver_manager.driver

            # 2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Wialon
            driver.switch_to.window(driver.window_handles[0])
            self.log("üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Wialon...")

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Wialon, —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤—Ä—É—á–Ω—É—é
            navibot = NavigationBot(driver, log_func=self.log)
            updated = navibot.process_row(car, switch_to_wialon=False)

            if not updated.get("–∫–æ–æ—Ä"):
                self.log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –¢–° {updated.get('–¢–°')}")
                return

            # 4. ‚ö†Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º JSON –î–û –≤—ã–∑–æ–≤–∞ –∫–∞—Ä—Ç
            self.json_data[row] = updated
            JSONManager().save_json(self.json_data, INPUT_FILEPATH)

            # 5. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
            if not self.driver_manager.switch_to_yandex_tab(log_func=self.log):
                self.driver_manager.open_yandex_maps()
                driver.switch_to.window(driver.window_handles[-1])
                self.log("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç.")

            # 6. –†–∞—Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∞
            maps_bot = MapsBot(driver, log_func=self.log)
            maps_bot.process_navigation_from_json(updated)

            # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            QTimer.singleShot(0, self.display_data)
            self.log(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –¢–°: {updated.get('–¢–°')}")

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_row_wrapper: {e}")

    def process_all(self):
        self.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¢–°...")
        for i in range(len(self.json_data)):
            self.process_selected_row_logic(i)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    gui = NavigationGUI()
    gui.show()
    sys.exit(app.exec())
