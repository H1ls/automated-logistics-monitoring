import re
from datetime import datetime


class MllParser:
    def __init__(self, default_year=2025):
        self.default_year = default_year
        self.date_pattern = r"\b\d{1,2}\.\d{1,2}(?:\.\d{2,4})?\b"
        self.time_pattern = r"\b\d{1,2}[:\-]\d{2}(?::\d{2})?\b"
        self.coord_pattern = r"\b\d{2}\.\d{5,},\s*\d{2,3}\.\d{5,}\b"
        self.address_keywords = [
            "–æ–±–ª", "–≥.", "—É–ª", "–¥.", "–ø–µ—Ä", "–ø—Ä-–¥", "—Ä-–Ω", "–ø—Ä–æ—Å–ø", "–ø–ª", "–∫–≤–∞—Ä—Ç–∞–ª", "—Ç–µ—Ä", "–ø—Ä–æ–º–∑–æ–Ω–∞", "—Å–µ–ª–æ", "–ø.", "–ø–æ—Å–µ–ª–æ–∫"
        ]

    def clean(self, text):
        return re.sub(r'\s+', ' ', text).strip()

    def extract(self, text: str, prefix: str = "–¢–æ—á–∫–∞") -> list[dict]:
        result = {}
        raw = text.replace("\n", " ").replace("‚Äî", "-")

        # üîπ –î–∞—Ç–∞
        dates = re.findall(self.date_pattern, raw)
        date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if dates:
            parts = dates[0].split(".")
            if len(parts) == 3:
                date_str = f"{int(parts[0]):02d}.{int(parts[1]):02d}.{int(parts[2])}"
            elif len(parts) == 2:
                date_str = f"{int(parts[0]):02d}.{int(parts[1]):02d}.{self.default_year}"
        result["–î–∞—Ç–∞ 1"] = date_str

        # üîπ –í—Ä–µ–º—è
        times = re.findall(self.time_pattern, raw)
        result["–í—Ä–µ–º—è 1"] = times[0] if times else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = re.findall(self.coord_pattern, raw)
        coord_text = coords[0] if coords else None

        # üîπ –ê–¥—Ä–µ—Å
        address = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        candidates = re.split(r"[.!?]", raw)
        for line in candidates:
            if any(kw in line.lower() for kw in self.address_keywords):
                address = self.clean(line)
                break

        result[f"{prefix} 1"] = address

        # üîπ –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –±–µ–∑ —É–∂–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ
        used_parts = dates + times + (coords if coords else []) + ([address] if address != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else [])
        leftover = raw
        for item in used_parts:
            leftover = leftover.replace(item, " ")
        result["–î—Ä—É–≥–æ–µ"] = self.clean(leftover)

        # üîπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤ "–î—Ä—É–≥–æ–µ"
        if coord_text and address != f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coord_text}" and address != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            result["–î—Ä—É–≥–æ–µ"] += f" –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coord_text}"

        return [result]

text = """02.02.2025, –ø—Ä–∏–±—ã—Ç—å –¥–æ 16:00:00, –û–û–û "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º "–≠–∫–æ–≤–µ—Ä"
–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª., –≥. –ê—Å–±–µ—Å—Ç, 101 –∫–≤–∞—Ä—Ç–∞–ª, 57.006083, 61.547357"""

parser = MllParser()
parsed = parser.extract(text, prefix="–í—ã–≥—Ä—É–∑–∫–∞")

for row in parsed:
    for k, v in row.items():
        print(f"{k}: {v}")
    print("---")
