import time
import pyperclip
import json
from datetime import datetime, timedelta
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from Navigation_Bot.jSONManager import JSONManager


class MapsBot:
    def __init__(self, driver, sheets_manager=None, log_func=None):
        self.driver = driver
        self.sheets_manager = sheets_manager
        self.log = log_func or print
        self._load_selectors()

    def _load_selectors(self):
        self.selectors = JSONManager.get_selectors("yandex_selectors")
        # self.log("‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä—ã –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    def _by(self, key):
        val = self.selectors.get(key)
        if not val:
            raise ValueError(f"–°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
        if val.startswith("/"):
            return (By.XPATH, val)
        elif val.startswith("."):
            return (By.CSS_SELECTOR, val)
        else:
            return (By.CLASS_NAME, val)

    def web_driver_wait(self, locator, timeout=10):
        return WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located(locator)
        )

    def prepare_route_interface(self):
        sel = self.selectors

        try:
            # 1. –ó–∞–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç)
            close_selector = sel.get("close_route", "")
            if close_selector:
                try:
                    close_locator = self._by("close_route")

                    btn = self.web_driver_wait(close_locator, timeout=3)
                    btn.click()
                    self.log("‚ùå –ó–∞–∫—Ä—ã—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç.")
                    time.sleep(0.3)
                except Exception:
                    pass  # –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

            # 2. –ù–∞–∂–∞—Ç—å "–ú–∞—Ä—à—Ä—É—Ç—ã"
            route_selector = sel.get("route_button", "")
            if route_selector:
                try:
                    route_locator = self._by("route_button")

                    btn = self.web_driver_wait(route_locator, timeout=5)
                    btn.click()
                    self.log("üìç –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–∞—Ä—à—Ä—É—Ç—ã'.")
                    time.sleep(0.3)
                    return True
                except Exception:
                    self.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ú–∞—Ä—à—Ä—É—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return False

            return False

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e).splitlines()[0]}")
            return False

    def process_navigation_from_json(self, car: dict):
        try:
            if not self.prepare_route_interface():
                return

            from_coords = car.get("–∫–æ–æ—Ä", "")
            if not from_coords:
                self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
                return

            # --- –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –≤—ã–≥—Ä—É–∑–∫—É —Å –∞–¥—Ä–µ—Å–æ–º –∏ –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º ---
            unloads = car.get("–í—ã–≥—Ä—É–∑–∫–∞", [])
            selected_address = None
            unload_datetime = None

            for i, unload in enumerate(unloads):
                key = f"–í—ã–≥—Ä—É–∑–∫–∞ {i + 1}"
                date_str = unload.get(f"–î–∞—Ç–∞ {i + 1}", "").strip()
                time_str = unload.get(f"–í—Ä–µ–º—è {i + 1}", "").strip()
                address = unload.get(key, "").strip()

                if address and date_str and time_str:
                    selected_address = address
                    unload_datetime = self._parse_datetime(date_str, time_str)
                    break

            if not selected_address or not unload_datetime:
                self.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–≥—Ä—É–∑–∫–µ.")
                return

            # --- –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∞–¥—Ä–µ—Å–∞ ---
            self._enter_from_coordinates(from_coords)
            self._enter_to_address(selected_address)

            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ---
            routes = self.get_route_info()
            if not routes:
                self.log("‚ùå –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
                return

            avg_minutes, avg_distance = self._calculate_average_route(routes)
            self.log(f"üõ£Ô∏è –°—Ä–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: {avg_distance} –∫–º –∑–∞ {avg_minutes} –º–∏–Ω")

            # --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–≥—Ä—É–∑–∫–∏ ---
            result = self._get_arrival_result(avg_minutes, unload_datetime)
            self.log(
                f"‚è±Ô∏è –ü—Ä–∏–±—ã—Ç–∏–µ: {result['–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è']}, "
                f"–í—ã–≥—Ä—É–∑–∫–∞: {result['–≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏']} ‚Üí "
                f"{'‚úÖ —É—Å–ø–µ–≤–∞–µ—Ç' if result['on_time'] else '‚ùå –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç'}"
            )

            # --- –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ ---
            try:
                close_btn = self.web_driver_wait(self._by("close_route"), timeout=5)
                close_btn.click()
                time.sleep(0.3)
                print("–ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
            except Exception:
                print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            car["–ú–∞—Ä—à—Ä—É—Ç"] = {
                "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ": f"{avg_distance} –∫–º",
                "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{avg_minutes} –º–∏–Ω",
                "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": result["–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"],
                "—É—Å–ø–µ–µ—Ç": result["on_time"],
                "time_buffer": result["time_buffer"]
            }

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e).splitlines()[0]}")

    def _enter_to_address(self, address):
        self.log(f"üì• –í–≤–æ–¥ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {address}")
        to_input = self.web_driver_wait(self._by("to_input"))
        to_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE, address, Keys.ENTER)
        time.sleep(1)

    def _enter_from_coordinates(self, coord):
        # self.log(f"üöö –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—à–∏–Ω—ã: {coord}")
        try:
            from_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located(self._by("from_input"))
            )

            self.driver.execute_script("arguments[0].focus();", from_input)
            time.sleep(0.5)
            from_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE)
            from_input.send_keys(coord, Keys.ENTER)
            time.sleep(1)
            # self.log("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã '–û—Ç–∫—É–¥–∞' –≤–≤–µ–¥–µ–Ω—ã.")
        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤ '–û—Ç–∫—É–¥–∞': {msg}")

    def get_route_info(self):
        self.log("‚åõ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        try:
            for _ in range(10):
                items = self.driver.find_elements(*self._by("route_item"))
                filtered = [el for el in items if "_type_auto" in el.get_attribute("class")]
                if filtered:
                    break
                time.sleep(1)
            else:
                self.log("‚ùó –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, fallback...")
                route = self.get_first_route()
                return [route] if route else []

            all_routes = []
            for item in filtered:
                parsed = self._parse_route_item(item)
                if parsed:
                    all_routes.append(parsed)

            self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(all_routes)}\n {all_routes}")
            return all_routes

        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {msg}")
            return []

    def get_first_route(self):
        try:
            item = self.driver.find_element(*self._by("route_item"))
            if "_type_auto" not in item.get_attribute("class"):
                return None
            return self._parse_route_item(item)
        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: {msg}")
            return None

    def _parse_route_item(self, item):
        try:
            time_el = item.find_element(*self._by("route_duration"))
            dist_el = item.find_element(*self._by("route_distance"))

            duration = time_el.text.strip().replace("\xa0", " ")
            dist_text = dist_el.text.strip().replace("\xa0", "").replace(" ", "").replace(",", ".").replace("–∫–º", "")
            distance = float(dist_text)

            return {
                "duration": duration,
                "distance": distance
            }


        except Exception as e:
            msg = str(e).splitlines()[0]
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {msg}")
            return None

    @staticmethod
    def _parse_datetime(date_str, time_str):
        try:
            # –ø—Ä–æ–±—É–µ–º —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
            return datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M:%S")
        except ValueError:
            try:
                # –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å–µ–∫—É–Ω–¥
                return datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            except Exception as e:
                print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è: '{date_str}' '{time_str}' ‚Üí {e}")
                return None

    @staticmethod
    def _duration_to_minutes(time_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç '2 –¥–Ω. 3 —á 41 –º–∏–Ω' –≤ –º–∏–Ω—É—Ç—ã (int)."""
        try:
            import re
            time_str = time_str.strip().lower().replace("~", "")
            total_min = 0

            pattern = r"(?:(\d+)\s*–¥–Ω\.)?\s*(?:(\d+)\s*—á)?\s*(?:(\d+)\s*–º–∏–Ω)?"
            match = re.search(pattern, time_str)
            if not match:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            days = int(match.group(1)) if match.group(1) else 0
            hours = int(match.group(2)) if match.group(2) else 0
            minutes = int(match.group(3)) if match.group(3) else 0

            total_min = days * 1440 + hours * 60 + minutes
            return total_min

        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {time_str} ‚Üí {e}")

    @staticmethod
    def _calculate_average_route(routes):
        times = [MapsBot._duration_to_minutes(r["duration"]) for r in routes]
        distances = [r["distance"] for r in routes]
        return round(sum(times) / len(times)), round(sum(distances) / len(distances))

    def _get_arrival_result(self, avg_minutes, unload_dt):
        arrival_time = datetime.now() + timedelta(minutes=avg_minutes)

        if unload_dt:
            buffer = unload_dt - arrival_time
            total_minutes = int(buffer.total_seconds() // 60)
        else:
            total_minutes = 0

        buf_hours = total_minutes // 60
        buf_minutes = total_minutes % 60

        return {
            "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": arrival_time.strftime("%d.%m.%Y %H:%M"),
            "–≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏": unload_dt.strftime("%d.%m.%Y %H:%M") if unload_dt else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "on_time": bool(unload_dt and arrival_time <= unload_dt),
            "time_buffer": f"{buf_hours}:{buf_minutes:02d}",
            "buffer_minutes": total_minutes
        }
