import time
import json
from datetime import datetime, timedelta
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class MapsBot:
    def __init__(self, driver, sheets_manager=None, log_func=None):
        self.driver = driver
        self.sheets_manager = sheets_manager
        self.log = log_func or print
        self.settings = self._load_settings()

    def _load_settings(self):
        try:
            with open("config/mapsbot_default_settings.json", "r", encoding="utf-8") as f:
                settings = json.load(f)
            try:
                with open("config/mapsbot_default_settings.json", "r", encoding="utf-8") as f:
                    settings.update(json.load(f))
                    self.log("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MapsBot")
            except FileNotFoundError:
                self.log("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MapsBot")
            return settings
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MapsBot: {e}")
            return {
                "selectors": {
                    "route_container_class": "auto-route-snippet-view",
                    "duration_class": "auto-route-snippet-view__duration",
                    "distance_class": "auto-route-snippet-view__distance"
                },
                "xpaths": {
                    "duration_xpath": ".//div[contains(@class, '__duration')]",
                    "distance_xpath": ".//div[contains(@class, '__distance')]"
                },
                "delays": {
                    "initial_render_wait_sec": 2,
                    "route_attempts": 10,
                    "per_attempt_wait_sec": 1
                },
                "fallback_enabled": True,
                "version": "embedded"}

    def web_driver_wait(self, xpath, timeout=10):
        return WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )

    def click_route_button(self):
        self.log("üìç –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ú–∞—Ä—à—Ä—É—Ç—ã'...")
        try:
            route_button = WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable(
                    (By.XPATH, "//a[contains(@class, 'button _view_search _size_medium _link')]"))
            )
            route_button.click()
            time.sleep(1)
        except:
            self.log("‚ùó –ö–Ω–æ–ø–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞–∂–∞—Ç–∞.")

    def enter_route(self, coord, address):
        self.log(f"üì§ –í–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞:–û—Ç–∫—É–¥–∞ ‚Üí {coord}–ö—É–¥–∞   ‚Üí {address}")
        try:
            from_input = self.web_driver_wait("//input[@placeholder='–û—Ç–∫—É–¥–∞']")
            from_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE)
            time.sleep(0.5)
            from_input.send_keys(coord)
            time.sleep(1)
            from_input.send_keys(Keys.ENTER)
            time.sleep(2)

            to_input = self.web_driver_wait("//input[@placeholder='–ö—É–¥–∞']")
            to_input.send_keys(Keys.CONTROL + "a", Keys.BACKSPACE)
            time.sleep(0.5)
            to_input.send_keys(address)
            time.sleep(1)
            to_input.send_keys(Keys.ENTER)
            time.sleep(2)

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")

    def get_route_info(self):
        self.log("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (2 —Å–µ–∫)...")
        time.sleep(self.settings["delays"]["initial_render_wait_sec"])

        self.log("‚åõ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        try:
            routes = []
            for attempt in range(self.settings["delays"]["route_attempts"]):
                self.log(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
                items = self.driver.find_elements(By.CLASS_NAME, self.settings["selectors"]["route_container_class"])
                if items:
                    self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(items)}")
                    for item in items:
                        parsed = self._parse_route_item(item)
                        if parsed:
                            routes.append(parsed)
                    break
                time.sleep(self.settings["delays"]["per_attempt_wait_sec"])

            if not routes and self.settings.get("fallback_enabled", True):
                self.log("‚ùó –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é...")
                fallback = self.get_first_route()
                return [fallback] if fallback else []

            return routes

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
            return []

    def _parse_route_item(self, item):
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ CSS
            try:
                time_el = item.find_element(By.CLASS_NAME, self.settings["selectors"]["duration_class"])
                dist_el = item.find_element(By.CLASS_NAME, self.settings["selectors"]["distance_class"])
            except:
                # Fallback —á–µ—Ä–µ–∑ XPath
                time_el = item.find_element(By.XPATH, self.settings["xpaths"]["duration_xpath"])
                dist_el = item.find_element(By.XPATH, self.settings["xpaths"]["distance_xpath"])

            duration = time_el.text.strip().replace("\xa0", " ").replace(" –º–∏–Ω", "").replace(" —á ", ":")
            if ":" not in duration:
                duration = f"0:{duration}"

            distance = dist_el.text.strip().replace("\xa0", " ").split()[0].replace(",", ".")
            self.log(f"duration:{duration}, distance: {float(distance)}")
            return {"duration": duration, "distance": float(distance)}

        except Exception as e:
            self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç: {e}")
            return None

    def get_first_route(self):
        self.log("üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é...")
        try:
            item = self.driver.find_element(By.CLASS_NAME, self.settings["selectors"]["route_container_class"])
            return self._parse_route_item(item)
        except Exception as e:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: {e}")
            return None

    def process_navigation_from_json(self, car):
        try:
            coord = car.get("–∫–æ–æ—Ä", "")
            unload_blocks = car.get("–í—ã–≥—Ä—É–∑–∫–∞", [])
            if not coord or not unload_blocks:
                self.log("‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –≤—ã–≥—Ä—É–∑–∫–∏ ‚Äî –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
                return

            address = unload_blocks[0].get("–í—ã–≥—Ä—É–∑–∫–∞ 1", "")
            date = unload_blocks[0].get("–î–∞—Ç–∞ 1", "")
            time_str = unload_blocks[0].get("–í—Ä–µ–º—è 1", "")
            unload_dt = self._parse_datetime(date, time_str)

            self.click_route_button()
            self.enter_route(coord, address)
            routes = self.get_route_info()

            if not routes:
                self.log("‚ùå –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
                return

            avg_min, avg_km = self._calculate_average_route(routes)
            arrival_result = self.calculate_arrival_time_from_minutes(avg_min, unload_dt)

            car["–ú–∞—Ä—à—Ä—É—Ç"] = {
                "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)": avg_min,
                "–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": avg_km,
                "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã—Ç–∏—è": arrival_result
            }

            self.log(f"‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {car.get('–¢–°')}:\n {arrival_result}")

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_navigation_from_json: {e}")

    @staticmethod
    def _parse_datetime(date_str, time_str):
        try:
            return datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        except (ValueError, TypeError):
            return None

    @staticmethod
    def _duration_to_minutes(time_str):
        h, m = map(int, time_str.split(":"))
        return h * 60 + m

    @staticmethod
    def _calculate_average_route(routes):
        times = [MapsBot._duration_to_minutes(r["duration"]) for r in routes]
        distances = [r["distance"] for r in routes]
        return round(sum(times) / len(times)), round(sum(distances) / len(distances))

    @staticmethod
    def calculate_arrival_time_from_minutes(avg_minutes, unload_datetime):
        arrival_time = datetime.now() + timedelta(minutes=avg_minutes)
        if unload_datetime:
            buffer = unload_datetime - arrival_time
            total_minutes = int(buffer.total_seconds() // 60)
        else:
            total_minutes = 0

        buf_hours = total_minutes // 60
        buf_minutes = total_minutes % 60

        return {
            "–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è": arrival_time.strftime("%d.%m.%Y %H:%M"),
            "–≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏": unload_datetime.strftime("%d.%m.%Y %H:%M") if unload_datetime else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "on_time": unload_datetime and arrival_time <= unload_datetime,
            "time_buffer": f"{buf_hours}:{buf_minutes:02d}"
        }
