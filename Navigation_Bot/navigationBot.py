import time
import pyperclip
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class NavigationBot:
    def __init__(self, driver, log_func=None):
        self.driver = driver
        self.log = log_func or print

    def web_driver_wait(self, xpath, timeout=15):
        return WebDriverWait(self.driver, timeout).until(
            EC.visibility_of_element_located((By.XPATH, xpath))
        )

    def clean_car(self):
        try:
            self.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞...")
            input_element = self.web_driver_wait(
                "//*[@id='monitoring_search_container']//input[@placeholder='–ü–æ–∏—Å–∫']"
            )
            input_element.click()
            input_element.send_keys(Keys.CONTROL + "a")
            input_element.send_keys(Keys.BACKSPACE)
            self.driver.execute_script("document.activeElement.blur();")
            self.log("‚úÖ –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ clean_car: {e}")

    def find_car_element(self, car_id):
        try:
            xpath = f"//*[@id='monitoring_units_custom_name_{car_id}']"
            return self.web_driver_wait(xpath)
        except Exception as e:
            self.log(f"‚ùå –ú–∞—à–∏–Ω–∞ —Å ID {car_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            return None

    def get_location_and_coordinates(self):
        try:
            self.log("üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
            location_text = None
            for _ in range(5):
                try:
                    address_el = self.driver.find_element(By.CSS_SELECTOR, ".addressName_WTb9")
                    text = address_el.text.strip()
                    if text and "–û–±—Ä–∞–±–æ—Ç–∫–∞" not in text:
                        location_text = text
                        break
                except:
                    pass
                time.sleep(2)
            if not location_text:
                raise Exception("‚è≥ –ê–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω.")

            self.log("üìå –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...")
            self.driver.find_element(By.CSS_SELECTOR, "button .icon-copy-coordinates").click()
            time.sleep(0.4)

            coordinates = pyperclip.paste().strip()
            if not coordinates or "," not in coordinates:
                raise Exception(f"‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: {coordinates}")

            self.log(f"‚úÖ –ê–¥—Ä–µ—Å: {location_text}, –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
            return location_text, coordinates

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return None, None

    def get_coordinates_from_wialon(self, car_data: dict) -> dict:
        """–í–≤–æ–¥ –¢–°, –ø–æ–∏—Å–∫ –ø–æ ID, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        car_number = car_data.get("–¢–°")
        car_id = car_data.get("id")
        self.log(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–° {car_number} (ID: {car_id})...")

        try:
            search_input = self.web_driver_wait(
                "//*[@id='monitoring_search_container']//input[@placeholder='–ü–æ–∏—Å–∫']",
                timeout=20
            )
            time.sleep(0.5)
            search_input.send_keys(car_number)
        except:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¢–°:{car_number}:{car_id} ")
            return car_data

        element = self.find_car_element(car_id)
        if not element:
            self.log(f"‚ö†Ô∏è –¢–° {car_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return car_data

        if not element.get_attribute("id").endswith(str(car_id)):
            self.log(f"‚ö†Ô∏è ID —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º: {car_id}")
            return car_data

        ActionChains(self.driver).move_to_element(element).perform()

        location_text, coordinates = self.get_location_and_coordinates()
        car_data["–≥–µ–æ"] = location_text
        car_data["–∫–æ–æ—Ä"] = coordinates

        self.log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {car_number}")
        return car_data

    def process_row(self, car_data: dict, switch_to_wialon: bool = True) -> dict:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if switch_to_wialon:
                self.log("üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Wialon...")
                self.driver.switch_to.window(self.driver.window_handles[0])

            try:
                self.driver.find_element(By.XPATH, "//*[@id='hb_mi_monitoring']").click()
            except:
                self.log("üîÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç.")

            updated_car = self.get_coordinates_from_wialon(car_data)
            self.clean_car()

            if not updated_car.get("–∫–æ–æ—Ä"):
                self.log(f"‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —É –¢–°: {updated_car.get('–¢–°')}")

            return updated_car

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_row: {e}")
            return car_data
